# Copyright 2020 Crown Copyright
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Used by templates for naming resources, see assorted helpers.tpl
fullnameOverride: palisade-examples

global:
  # uniqueNamespace: if true (and this is a new install) the generated deployment name will be used as the namespace name too
  uniqueNamespace: false

  # namespace: the target namespace, overridden by (1) --namespace (helm, the preferred override) or (2) global.uniqueNamespace=true, ingress path will include this name at the path root (default truncated to null)
  namespace: default

  # Sets up some mount points in services for example data
  deployment: example

  env:
    example:
    - name: "SPRING_PROFILES_ACTIVE"
      value: "k8s,example-k8s"
    performance-test:
    - name: "SPRING_PROFILES_ACTIVE"
      value: "k8s,example-perf-k8s"

  # repository: the name of the docker image repository that is the source of local application images that was populated during the project build process and will now be referenced in the pods
  repository: palisade

  kafka:
    # install: install kafka streaming platform
    install: false

  # persistent-volume and associated claims configurations

  # guarantee the data we are expecting is mounted appropriately
  persistence:
    classpathJars:
      local:
        # must be manually set to an absolute path
        # the `deployment: example` wil lead to the hostPath being appended to `./deployment/target/example` as intended
        hostPath: "./deployment/target"

    # dataStores: List of stores used by data-service and associated data-readers to read resources and return to a client
    # nb. the mountPath here will be referenced by all client resource requests
    dataStores:
      palisade-data-store:
        storageClassName:
          _default: hostpath
          local: hostpath
          hostPath: "./resources/data"
          aws: efs-sc
        auto:
          _default: false
          local: false
          aws: false
        mode:
          _default: ReadWriteOnce
          local: ReadWriteMany
          aws: ReadWriteMany
        mountPath: "/data/local-data-store"
        storage: 4Gi
        local:
          hostPath: "/"
        aws:
          volumeHandle: data
          volumePath: "/"

    # kafka: Store used by kafka for persisting stream logs
    kafka:
      storageClassName:
        _default: hostpath
        local: hostpath
        aws: ebs-sc
      name: kafka-persistence
      auto:
        _default: true
        local: true
        aws: true
      mode:
        _default: ReadWriteOnce
        local: ReadWriteOnce
        aws: ReadWriteOnce
      storage: 8Gi
      local:
        hostPath: "/"
      aws:
        volumeHandle: null
        volumePath: "/"

    # zookeeper: Store used by zookeeper for persisting stream logs
    zookeeper:
      storageClassName:
        _default: hostpath
        local: hostpath
        aws: ebs-sc
      name: zookeeper-persistence
      auto:
        _default: true
        local: true
        aws: true
      mode:
        _default: ReadWriteOnce
        local: ReadWriteOnce
        aws: ReadWriteOnce
      storage: 2Gi
      local:
        hostPath: "/"
      aws:
        volumeHandle: null
        volumePath: "/"

    # redis: Store used by redis and redis-cluster for persistence and caching
    redisMaster:
      storageClassName:
        _default: hostpath
        local: hostpath
        aws: ebs-sc
      name: redis-persistence-master
      auto:
        _default: true
        local: true
        aws: true
      mode:
        _default: ReadWriteOnce
        local: ReadWriteOnce
        aws: ReadWriteOnce
      storage: 8Gi
      local:
        hostPath: "/"
      aws:
        volumeHandle: null
        volumePath: "/"

    redisSlave:
      storageClassName:
        _default: hostpath
        local: hostpath
        aws: ebs-sc
      name: redis-persistence-slave
      auto:
        _default: true
        local: true
        aws: true
      mode:
        _default: ReadWriteOnce
        local: ReadWriteOnce
        aws: ReadWriteOnce
      storage: 8Gi
      local:
        hostPath: "/"
      aws:
        volumeHandle: null
        volumePath: "/"

    redisCluster:
      storageClassName:
        _default: hostpath
        local: hostpath
        aws: ebs-sc
      name: redis-persistence-cluster
      auto:
        _default: true
        local: true
        aws: true
      mode:
        _default: ReadWriteOnce
        local: ReadWriteOnce
        aws: ReadWriteOnce
      storage: 4Gi
      local:
        hostPath: "/"
      aws:
        volumeHandle: null
        volumePath: "/"


    # global.persistence.statefulSet.pv.enabled: Global variable that controls the generation of statefulSet pv/pvc(s)
    statefulSet:
      pv:
        enabled: true

  # must be last for file to be appended with addresses
  globalIPAddresses:
